
agent PrimeChecker[Int, Bool]() {
  on n =>
    ! isPrime(n)

  fun isPrime(n: Int): Bool =>
    if n < 2 then 
      False
    else if n == 2 || n == 3 then 
      True
    else if n % 2 == 0 || n % 3 == 0 then 
      False
    else {
      let result = True
      let i = 5

      while result && i * i <= n
        if n % i == 0 || n % (i + 2) == 0 then 
          result := False
        else
          i := i + 6

      result
    }
}

The problem with this approach is that it requires that the entire agent needs to be constructed all at once.  
It isn't possible to incrementally add pieces into the agent bit by bit... almost incrementally.  Thinking of 
this from a notebook perspective.

An agent, in this context, state can not be changed from the "outside".  The functions, if public, can be called however, 
when being called, will be folded into the event handlers, but never will 2 threads be active in an agent at a point in time.


Let's think about this as an example.

val fileReader = rootAgent.create(FileReader, "/fs/reader")

fun readFile(fileName: String, to: Stream<Char>) {
    emit(fileReader, {fileName: fileName, out: to})
}

type FileReaderInput = {
    fileName: String,
    out: Stream<Char>
}

agent FileReader {
  input stdin: Stream<String | FileReaderInput>
  output stdout: Stream<Char>

  on fileName: String => {
    writeTo(fileName, stdout)
  }

  on input: FileReadInput => {
    writeTo(input.fileName, input.out)
  }

  fn writeTo(fileName: String, out: Stream<Char>) {
    // some primitive agent which will do this for me.  This s
  }
}

We end up with nothing more than dependencies between declarations and files.

agent Merge<A, B, C, D>[A | C, B | D](left: Agent<A, B>, right: Agent<C, D>) {
  let leftObs: Observer = left.stdout.observe(fun(msg: B) => ! msg)
  let rightObs: Observer = right.stdout.observe(fun(msg: D) => ! msg)

  fun deinit() => {
    leftObs.cancel()
    rightObs.cancel()
  }

  on input: A => left ! input
  on input: C => right ! input
}


agent Zip<A, B>[Unknown, (A, B)](left: Agent<Any, A>, right: Agent<Any, B>) {
  let leftBuffer: List<A> = []
  let rightBuffer: List<B> = []

  let leftObs = left.stdout.observe(fun(msg: A) => {
    leftBuffer = leftBuffer ++ [left.v]
    tryEmitPair()
  })
  let rightObs = right.stdout.observe(fun(msg: B) => {
    rightBuffer = rightBuffer ++ [right.v]
    tryEmitPair()
  })

  fun deinit() => {
    leftObs.cancel()
    rightObs.cancel()
  }

  fun tryEmitPair() => {
    if leftBuffer.isNotEmpty() && rightBuffer.isNotEmpty() then {
      let a = leftBuffer.head()
      let b = rightBuffer.head()
      leftBuffer = leftBuffer.tail()
      rightBuffer = rightBuffer.tail()

      ! (a, b)
    }
  }
}

fun compose<A, B, C> (f: (A) -> B, g: (B) -> C): (A) -> C =>
  (n) => g(f(n))

agent Adder[Int, Int](n: Int) {
  on v => ! (v * n)
}

let x = Adder(10)
x.out.observe(fn(n) => println(x))
x.send(20)


agent Mapper<A, B>[A, B](f: (A) -> B) =
  on v: A => ! f(v)

fun odd(n: Int): Bool = if n == 0 then False else even(n - 1)
and even(n: Int): Bool = if n == 0 then True else odd(n - 1)

type Nil = Nil()
 and Cons<X> = Cons(car: X, cdr: List<X>)
 and List<X> = Cons<X> | Nil

import "string.ulce"
